/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreateDrinkResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful response
     */
    drinkResponse?: components.DrinkResponse | undefined;
    /**
     * unexpected error
     */
    error?: components.ErrorT | undefined;
};

/** @internal */
export namespace CreateDrinkResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        DrinkResponse?: components.DrinkResponse$.Inbound | undefined;
        error?: components.ErrorT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateDrinkResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            DrinkResponse: components.DrinkResponse$.inboundSchema.optional(),
            error: components.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.DrinkResponse === undefined ? null : { drinkResponse: v.DrinkResponse }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        DrinkResponse?: components.DrinkResponse$.Outbound | undefined;
        error?: components.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateDrinkResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            drinkResponse: components.DrinkResponse$.outboundSchema.optional(),
            error: components.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.drinkResponse === undefined ? null : { DrinkResponse: v.drinkResponse }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
