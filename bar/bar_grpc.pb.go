// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bar.proto

package bar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bar_CreateDrink_FullMethodName = "/bar.Bar/CreateDrink"
	Bar_GetDrink_FullMethodName    = "/bar.Bar/GetDrink"
)

// BarClient is the client API for Bar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarClient interface {
	CreateDrink(ctx context.Context, in *CreateDrinkRequest, opts ...grpc.CallOption) (*DrinkResponse, error)
	GetDrink(ctx context.Context, in *GetDrinkRequest, opts ...grpc.CallOption) (*DrinkRecipeResponse, error)
}

type barClient struct {
	cc grpc.ClientConnInterface
}

func NewBarClient(cc grpc.ClientConnInterface) BarClient {
	return &barClient{cc}
}

func (c *barClient) CreateDrink(ctx context.Context, in *CreateDrinkRequest, opts ...grpc.CallOption) (*DrinkResponse, error) {
	out := new(DrinkResponse)
	err := c.cc.Invoke(ctx, Bar_CreateDrink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barClient) GetDrink(ctx context.Context, in *GetDrinkRequest, opts ...grpc.CallOption) (*DrinkRecipeResponse, error) {
	out := new(DrinkRecipeResponse)
	err := c.cc.Invoke(ctx, Bar_GetDrink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarServer is the server API for Bar service.
// All implementations must embed UnimplementedBarServer
// for forward compatibility
type BarServer interface {
	CreateDrink(context.Context, *CreateDrinkRequest) (*DrinkResponse, error)
	GetDrink(context.Context, *GetDrinkRequest) (*DrinkRecipeResponse, error)
	mustEmbedUnimplementedBarServer()
}

// UnimplementedBarServer must be embedded to have forward compatible implementations.
type UnimplementedBarServer struct {
}

func (UnimplementedBarServer) CreateDrink(context.Context, *CreateDrinkRequest) (*DrinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDrink not implemented")
}
func (UnimplementedBarServer) GetDrink(context.Context, *GetDrinkRequest) (*DrinkRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrink not implemented")
}
func (UnimplementedBarServer) mustEmbedUnimplementedBarServer() {}

// UnsafeBarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarServer will
// result in compilation errors.
type UnsafeBarServer interface {
	mustEmbedUnimplementedBarServer()
}

func RegisterBarServer(s grpc.ServiceRegistrar, srv BarServer) {
	s.RegisterService(&Bar_ServiceDesc, srv)
}

func _Bar_CreateDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServer).CreateDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bar_CreateDrink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServer).CreateDrink(ctx, req.(*CreateDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bar_GetDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServer).GetDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bar_GetDrink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServer).GetDrink(ctx, req.(*GetDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bar_ServiceDesc is the grpc.ServiceDesc for Bar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bar.Bar",
	HandlerType: (*BarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDrink",
			Handler:    _Bar_CreateDrink_Handler,
		},
		{
			MethodName: "GetDrink",
			Handler:    _Bar_GetDrink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bar.proto",
}
